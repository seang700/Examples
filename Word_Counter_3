import nltk.classify.util
from nltk.classify import NaiveBayesClassifier
from nltk.corpus import names
import pandas as pd

#https://pythonspot.com/python-sentiment-analysis/
raw_text = open('C:/Users/Sean/Desktop/Apple Earnings Transcript.txt','r')
txt_format = raw_text.read()

positive_vocab = [ "kind", "consumers", "higher", "Good", "grew", "growing", "great", "records", "strong", "up", "record", "all-time", "growth", "5G" ]
negative_vocab = [ "impact", "demand", "President", "mix", "guidance" ]
neutral_vocab = [ "you", "--","our", "for", "that", "in", "we", "a", "to", "of", "and", "The" ]

def word_feats(words):
    return dict([(word, True) for word in words])

positive_features = [(word_feats(pos), 'pos') for pos in positive_vocab]
negative_features = [(word_feats(neg), 'neg') for neg in negative_vocab]
neutral_features = [(word_feats(neu), 'neu') for neu in neutral_vocab]

train_set = negative_features + positive_features + neutral_features
classifier = NaiveBayesClassifier.train(train_set)

# Predict
neg = 0
pos = 0
sentence = txt_format
sentence = sentence.lower()
words = sentence.split(' ')
for word in words:
    classResult = classifier.classify(word_feats(word))
    if classResult == 'neg':
        neg = neg + 1
    if classResult == 'pos':
        pos = pos + 1

print('Positive: ' + str(float(pos) / len(words)))
print('Negative: ' + str(float(neg) / len(words)))
